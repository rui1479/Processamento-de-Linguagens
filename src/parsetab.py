
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON CR DIVIDE DOT ELSE EMIT EQUALS EXCLAMATION ID IF INF INTERROGATION KEY LPAREN MIDFUNC MINUS NUMBER PLUS QUOTE RPAREN SEMICOLON SUP THEN TIMES WORD\n    statement : instructions\n    instructions : instructions instruction \n    instructions : instruction\n    instructions : instructions instruction WORD\n    instructions : instructions instruction WORD instruction\n    instructions : FUNCTION_DEFINITIONinstruction : instructions WORD instructions\n    FUNCTION_DEFINITION : CONDICIONALinstruction : NUMBERinstruction : operatorinstruction : CARACTERoperator : PLUS\n                | MINUS\n                | TIMES\n                | DIVIDE\n                | SUP\n                | INF\n                | EQUALSinstruction : PRINTPRINT : DOTPRINT :  DOT NUMBERPRINT : DOT QUOTE words QUOTEPRINT : EMITFUNCTION_DEFINITION : COLON WORD LPAREN FUNCTION_PARAMS RPAREN FUNCTION_BODY SEMICOLONFUNCTION_PARAMS : PARAMS FUNCTION_PARAMS FUNCTION_PARAMS : PARAMS MIDFUNC WORDPARAMS : IDPARAMS : MIDFUNCPARAMS : WORDFUNCTION_BODY : instructions FUNCTION_BODY : instructionFUNCTION_DEFINITION : COLON WORD PRINTFUNC SEMICOLONPRINTFUNC : DOT QUOTE words QUOTEPRINTFUNC : DOT QUOTE words QUOTE CARACTERPRINTFUNC : QUOTE words QUOTEwords : words WORD words : words WORD sinaiswords : WORDinstructions : FUNCCALLFUNCCALL : WORDsinais : EXCLAMATION\n                | INTERROGATION\n    FUNCTION_DEFINITION : COLON funcword SEMICOLONfuncword : WORD WORDCARACTER : CRCARACTER : KEY\n    CONDICIONAL : COLON WORD operator IF part ELSE part THEN SEMICOLON\n    \n    part : DOT QUOTE words QUOTE\n    \n    part : QUOTE words QUOTE\n    '
    
_lr_action_items = {'NUMBER':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,29,31,32,39,42,48,52,54,66,67,73,80,],[7,7,-3,-40,-6,-39,-9,-10,-11,-19,-8,-12,-13,-14,-15,-16,-17,-18,-45,-46,29,-23,7,-2,7,-21,7,7,-43,-3,-32,-22,7,7,-3,-24,-47,]),'COLON':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,29,31,32,39,42,48,52,54,66,67,73,80,],[12,12,-3,-40,-6,-39,-9,-10,-11,-19,-8,-12,-13,-14,-15,-16,-17,-18,-45,-46,-20,-23,12,-2,12,-21,12,12,-43,-3,-32,-22,12,12,-3,-24,-47,]),'WORD':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,31,32,34,38,39,40,41,42,43,45,46,47,48,50,51,52,53,54,56,59,60,62,63,64,66,67,70,71,73,75,80,],[4,26,-3,-40,-6,-39,-9,-10,-11,-19,-8,27,-12,-13,-14,-15,-16,-17,-18,-45,-46,-20,-23,26,31,4,33,-21,41,4,26,43,41,-43,53,-38,-3,-29,43,-28,-27,-32,41,53,-22,-36,4,68,41,53,-37,-41,-42,26,-3,41,53,-24,53,-47,]),'PLUS':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,31,32,39,42,48,52,54,66,67,73,80,],[13,13,-3,-40,-6,-39,-9,-10,-11,-19,-8,-12,-13,-14,-15,-16,-17,-18,-45,-46,-20,-23,13,-2,13,13,-21,13,13,-43,-3,-32,-22,13,13,-3,-24,-47,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,31,32,39,42,48,52,54,66,67,73,80,],[14,14,-3,-40,-6,-39,-9,-10,-11,-19,-8,-12,-13,-14,-15,-16,-17,-18,-45,-46,-20,-23,14,-2,14,14,-21,14,14,-43,-3,-32,-22,14,14,-3,-24,-47,]),'TIMES':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,31,32,39,42,48,52,54,66,67,73,80,],[15,15,-3,-40,-6,-39,-9,-10,-11,-19,-8,-12,-13,-14,-15,-16,-17,-18,-45,-46,-20,-23,15,-2,15,15,-21,15,15,-43,-3,-32,-22,15,15,-3,-24,-47,]),'DIVIDE':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,31,32,39,42,48,52,54,66,67,73,80,],[16,16,-3,-40,-6,-39,-9,-10,-11,-19,-8,-12,-13,-14,-15,-16,-17,-18,-45,-46,-20,-23,16,-2,16,16,-21,16,16,-43,-3,-32,-22,16,16,-3,-24,-47,]),'SUP':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,31,32,39,42,48,52,54,66,67,73,80,],[17,17,-3,-40,-6,-39,-9,-10,-11,-19,-8,-12,-13,-14,-15,-16,-17,-18,-45,-46,-20,-23,17,-2,17,17,-21,17,17,-43,-3,-32,-22,17,17,-3,-24,-47,]),'INF':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,31,32,39,42,48,52,54,66,67,73,80,],[18,18,-3,-40,-6,-39,-9,-10,-11,-19,-8,-12,-13,-14,-15,-16,-17,-18,-45,-46,-20,-23,18,-2,18,18,-21,18,18,-43,-3,-32,-22,18,18,-3,-24,-47,]),'EQUALS':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,31,32,39,42,48,52,54,66,67,73,80,],[19,19,-3,-40,-6,-39,-9,-10,-11,-19,-8,-12,-13,-14,-15,-16,-17,-18,-45,-46,-20,-23,19,-2,19,19,-21,19,19,-43,-3,-32,-22,19,19,-3,-24,-47,]),'CR':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,29,31,32,39,42,48,52,54,66,67,72,73,80,],[20,20,-3,-40,-6,-39,-9,-10,-11,-19,-8,-12,-13,-14,-15,-16,-17,-18,-45,-46,-20,-23,20,-2,20,-21,20,20,-43,-3,-32,-22,20,20,-3,20,-24,-47,]),'KEY':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,29,31,32,39,42,48,52,54,66,67,72,73,80,],[21,21,-3,-40,-6,-39,-9,-10,-11,-19,-8,-12,-13,-14,-15,-16,-17,-18,-45,-46,-20,-23,21,-2,21,-21,21,21,-43,-3,-32,-22,21,21,-3,21,-24,-47,]),'DOT':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,31,32,39,42,48,49,52,54,66,67,69,73,80,],[22,22,-3,-40,-6,-39,-9,-10,-11,-19,-8,-12,-13,-14,-15,-16,-17,-18,-45,-46,-20,-23,22,-2,22,37,-21,22,22,-43,-3,-32,58,-22,22,22,-3,58,-24,-47,]),'EMIT':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,29,31,32,39,42,48,52,54,66,67,73,80,],[23,23,-3,-40,-6,-39,-9,-10,-11,-19,-8,-12,-13,-14,-15,-16,-17,-18,-45,-46,-20,-23,23,-2,23,-21,23,23,-43,-3,-32,-22,23,23,-3,-24,-47,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,25,29,31,32,39,42,48,52,73,80,],[0,-1,-3,-40,-6,-39,-9,-10,-11,-19,-8,-12,-13,-14,-15,-16,-17,-18,-45,-46,-20,-23,-2,-21,-4,-7,-43,-5,-32,-22,-24,-47,]),'SEMICOLON':([3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,25,28,29,31,32,33,35,39,42,48,52,61,65,66,67,72,73,77,78,80,],[-3,-40,-6,-39,-9,-10,-11,-19,-8,-12,-13,-14,-15,-16,-17,-18,-45,-46,-20,-23,-2,39,-21,-4,-7,-44,48,-43,-5,-32,-22,-35,73,-30,-3,-33,-24,-34,80,-47,]),'IF':([13,14,15,16,17,18,19,36,],[-12,-13,-14,-15,-16,-17,-18,49,]),'QUOTE':([22,27,37,40,41,49,51,53,58,60,62,63,64,69,71,75,],[30,38,50,52,-38,59,61,-36,70,72,-37,-41,-42,59,76,79,]),'LPAREN':([27,],[34,]),'ID':([34,43,45,46,47,56,],[47,-29,47,-28,-27,-28,]),'MIDFUNC':([34,43,45,46,47,56,],[46,-29,56,-28,-27,-28,]),'RPAREN':([44,55,68,],[54,-25,-26,]),'EXCLAMATION':([53,],[63,]),'INTERROGATION':([53,],[64,]),'ELSE':([57,76,79,],[69,-49,-48,]),'THEN':([74,76,79,],[78,-49,-48,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'instructions':([0,2,24,26,31,32,54,66,],[2,24,24,32,24,24,66,24,]),'instruction':([0,2,24,26,31,32,54,66,],[3,25,25,3,42,25,67,25,]),'FUNCTION_DEFINITION':([0,2,24,26,31,32,54,66,],[5,5,5,5,5,5,5,5,]),'FUNCCALL':([0,2,24,26,31,32,54,66,],[6,6,6,6,6,6,6,6,]),'operator':([0,2,24,26,27,31,32,54,66,],[8,8,8,8,36,8,8,8,8,]),'CARACTER':([0,2,24,26,31,32,54,66,72,],[9,9,9,9,9,9,9,9,77,]),'PRINT':([0,2,24,26,31,32,54,66,],[10,10,10,10,10,10,10,10,]),'CONDICIONAL':([0,2,24,26,31,32,54,66,],[11,11,11,11,11,11,11,11,]),'funcword':([12,],[28,]),'PRINTFUNC':([27,],[35,]),'words':([30,38,50,59,70,],[40,51,60,71,75,]),'FUNCTION_PARAMS':([34,45,],[44,55,]),'PARAMS':([34,45,],[45,45,]),'part':([49,69,],[57,74,]),'sinais':([53,],[62,]),'FUNCTION_BODY':([54,],[65,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> instructions','statement',1,'p_statement_function','grammar.py',73),
  ('instructions -> instructions instruction','instructions',2,'p_instructions1','grammar.py',80),
  ('instructions -> instruction','instructions',1,'p_instructions2','grammar.py',114),
  ('instructions -> instructions instruction WORD','instructions',3,'p_instructions3','grammar.py',120),
  ('instructions -> instructions instruction WORD instruction','instructions',4,'p_instructions7','grammar.py',185),
  ('instructions -> FUNCTION_DEFINITION','instructions',1,'p_instructions4','grammar.py',255),
  ('instruction -> instructions WORD instructions','instruction',3,'p_instructions5','grammar.py',260),
  ('FUNCTION_DEFINITION -> CONDICIONAL','FUNCTION_DEFINITION',1,'p_instructions6','grammar.py',304),
  ('instruction -> NUMBER','instruction',1,'p_instruction_number','grammar.py',309),
  ('instruction -> operator','instruction',1,'p_instruction_operator','grammar.py',314),
  ('instruction -> CARACTER','instruction',1,'p_instruction_caracter','grammar.py',319),
  ('operator -> PLUS','operator',1,'p_operator','grammar.py',324),
  ('operator -> MINUS','operator',1,'p_operator','grammar.py',325),
  ('operator -> TIMES','operator',1,'p_operator','grammar.py',326),
  ('operator -> DIVIDE','operator',1,'p_operator','grammar.py',327),
  ('operator -> SUP','operator',1,'p_operator','grammar.py',328),
  ('operator -> INF','operator',1,'p_operator','grammar.py',329),
  ('operator -> EQUALS','operator',1,'p_operator','grammar.py',330),
  ('instruction -> PRINT','instruction',1,'p_instruction_print','grammar.py',342),
  ('PRINT -> DOT','PRINT',1,'p_print','grammar.py',346),
  ('PRINT -> DOT NUMBER','PRINT',2,'p_print_num','grammar.py',350),
  ('PRINT -> DOT QUOTE words QUOTE','PRINT',4,'p_print_string','grammar.py',355),
  ('PRINT -> EMIT','PRINT',1,'p_print_emit','grammar.py',360),
  ('FUNCTION_DEFINITION -> COLON WORD LPAREN FUNCTION_PARAMS RPAREN FUNCTION_BODY SEMICOLON','FUNCTION_DEFINITION',7,'p_function_definition1','grammar.py',365),
  ('FUNCTION_PARAMS -> PARAMS FUNCTION_PARAMS','FUNCTION_PARAMS',2,'p_function_params1','grammar.py',377),
  ('FUNCTION_PARAMS -> PARAMS MIDFUNC WORD','FUNCTION_PARAMS',3,'p_function_params2','grammar.py',385),
  ('PARAMS -> ID','PARAMS',1,'p_params_id','grammar.py',392),
  ('PARAMS -> MIDFUNC','PARAMS',1,'p_params_midfunc','grammar.py',397),
  ('PARAMS -> WORD','PARAMS',1,'p_params_word','grammar.py',402),
  ('FUNCTION_BODY -> instructions','FUNCTION_BODY',1,'p_function_body1','grammar.py',407),
  ('FUNCTION_BODY -> instruction','FUNCTION_BODY',1,'p_function_body2','grammar.py',449),
  ('FUNCTION_DEFINITION -> COLON WORD PRINTFUNC SEMICOLON','FUNCTION_DEFINITION',4,'p_function_definition2','grammar.py',456),
  ('PRINTFUNC -> DOT QUOTE words QUOTE','PRINTFUNC',4,'p_printfunc1','grammar.py',467),
  ('PRINTFUNC -> DOT QUOTE words QUOTE CARACTER','PRINTFUNC',5,'p_printfunc2','grammar.py',478),
  ('PRINTFUNC -> QUOTE words QUOTE','PRINTFUNC',3,'p_printfunc3','grammar.py',486),
  ('words -> words WORD','words',2,'p_words1','grammar.py',492),
  ('words -> words WORD sinais','words',3,'p_words3','grammar.py',497),
  ('words -> WORD','words',1,'p_words2','grammar.py',502),
  ('instructions -> FUNCCALL','instructions',1,'p_functioncall','grammar.py',507),
  ('FUNCCALL -> WORD','FUNCCALL',1,'p_funccall','grammar.py',512),
  ('sinais -> EXCLAMATION','sinais',1,'p_sinais','grammar.py',527),
  ('sinais -> INTERROGATION','sinais',1,'p_sinais','grammar.py',528),
  ('FUNCTION_DEFINITION -> COLON funcword SEMICOLON','FUNCTION_DEFINITION',3,'p_function_definition3','grammar.py',534),
  ('funcword -> WORD WORD','funcword',2,'p_funcword','grammar.py',540),
  ('CARACTER -> CR','CARACTER',1,'p_cr1','grammar.py',551),
  ('CARACTER -> KEY','CARACTER',1,'p_cr2','grammar.py',556),
  ('CONDICIONAL -> COLON WORD operator IF part ELSE part THEN SEMICOLON','CONDICIONAL',9,'p_condicional1','grammar.py',562),
  ('part -> DOT QUOTE words QUOTE','part',4,'p_part1','grammar.py',581),
  ('part -> QUOTE words QUOTE','part',3,'p_part2','grammar.py',590),
]
